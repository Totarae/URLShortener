// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\admin\GolandProjects\URLShortener\internal\storage\storage.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\admin\GolandProjects\URLShortener\internal\storage\storage.go -destination=C:\Users\admin\GolandProjects\URLShortener\internal\mocks\mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/Totarae/URLShortener/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AppendToFile mocks base method.
func (m *MockStorage) AppendToFile(entry model.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendToFile", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendToFile indicates an expected call of AppendToFile.
func (mr *MockStorageMockRecorder) AppendToFile(entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendToFile", reflect.TypeOf((*MockStorage)(nil).AppendToFile), entry)
}

// Get mocks base method.
func (m *MockStorage) Get(short string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", short)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(short any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), short)
}

// GetByUser mocks base method.
func (m *MockStorage) GetByUser(userID string) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", userID)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockStorageMockRecorder) GetByUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockStorage)(nil).GetByUser), userID)
}

// MarkDeleted mocks base method.
func (m *MockStorage) MarkDeleted(shortenIDs []string, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkDeleted", shortenIDs, userID)
}

// MarkDeleted indicates an expected call of MarkDeleted.
func (mr *MockStorageMockRecorder) MarkDeleted(shortenIDs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockStorage)(nil).MarkDeleted), shortenIDs, userID)
}

// Save mocks base method.
func (m *MockStorage) Save(short, original, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", short, original, userID)
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(short, original, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), short, original, userID)
}

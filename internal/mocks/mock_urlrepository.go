// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\admin\GolandProjects\URLShortener\internal\repositories\urlrepository.go
//
// Generated by this command:
//
//	mockgen -source=C:\Users\admin\GolandProjects\URLShortener\internal\repositories\urlrepository.go -destination=C:\Users\admin\GolandProjects\URLShortener\internal\mocks\mock_urlrepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Totarae/URLShortener/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockURLRepositoryInterface is a mock of URLRepositoryInterface interface.
type MockURLRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryInterfaceMockRecorder
	isgomock struct{}
}

// MockURLRepositoryInterfaceMockRecorder is the mock recorder for MockURLRepositoryInterface.
type MockURLRepositoryInterfaceMockRecorder struct {
	mock *MockURLRepositoryInterface
}

// NewMockURLRepositoryInterface creates a new mock instance.
func NewMockURLRepositoryInterface(ctrl *gomock.Controller) *MockURLRepositoryInterface {
	mock := &MockURLRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepositoryInterface) EXPECT() *MockURLRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountURLs mocks base method.
func (m *MockURLRepositoryInterface) CountURLs(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountURLs", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountURLs indicates an expected call of CountURLs.
func (mr *MockURLRepositoryInterfaceMockRecorder) CountURLs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountURLs", reflect.TypeOf((*MockURLRepositoryInterface)(nil).CountURLs), ctx)
}

// CountUsers mocks base method.
func (m *MockURLRepositoryInterface) CountUsers(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockURLRepositoryInterfaceMockRecorder) CountUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockURLRepositoryInterface)(nil).CountUsers), ctx)
}

// GetShortURLByOrigin mocks base method.
func (m *MockURLRepositoryInterface) GetShortURLByOrigin(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURLByOrigin", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLByOrigin indicates an expected call of GetShortURLByOrigin.
func (mr *MockURLRepositoryInterfaceMockRecorder) GetShortURLByOrigin(ctx, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURLByOrigin", reflect.TypeOf((*MockURLRepositoryInterface)(nil).GetShortURLByOrigin), ctx, originalURL)
}

// GetURL mocks base method.
func (m *MockURLRepositoryInterface) GetURL(ctx context.Context, shorten string) (*model.URLObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shorten)
	ret0, _ := ret[0].(*model.URLObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockURLRepositoryInterfaceMockRecorder) GetURL(ctx, shorten any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLRepositoryInterface)(nil).GetURL), ctx, shorten)
}

// GetURLsByUserID mocks base method.
func (m *MockURLRepositoryInterface) GetURLsByUserID(ctx context.Context, userID string) ([]*model.URLObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*model.URLObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLsByUserID indicates an expected call of GetURLsByUserID.
func (mr *MockURLRepositoryInterfaceMockRecorder) GetURLsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsByUserID", reflect.TypeOf((*MockURLRepositoryInterface)(nil).GetURLsByUserID), ctx, userID)
}

// MarkURLsAsDeleted mocks base method.
func (m *MockURLRepositoryInterface) MarkURLsAsDeleted(ctx context.Context, ids []string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkURLsAsDeleted", ctx, ids, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkURLsAsDeleted indicates an expected call of MarkURLsAsDeleted.
func (mr *MockURLRepositoryInterfaceMockRecorder) MarkURLsAsDeleted(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkURLsAsDeleted", reflect.TypeOf((*MockURLRepositoryInterface)(nil).MarkURLsAsDeleted), ctx, ids, userID)
}

// Ping mocks base method.
func (m *MockURLRepositoryInterface) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLRepositoryInterfaceMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLRepositoryInterface)(nil).Ping), ctx)
}

// SaveBatchURLs mocks base method.
func (m *MockURLRepositoryInterface) SaveBatchURLs(ctx context.Context, urlObjs []*model.URLObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchURLs", ctx, urlObjs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchURLs indicates an expected call of SaveBatchURLs.
func (mr *MockURLRepositoryInterfaceMockRecorder) SaveBatchURLs(ctx, urlObjs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchURLs", reflect.TypeOf((*MockURLRepositoryInterface)(nil).SaveBatchURLs), ctx, urlObjs)
}

// SaveURL mocks base method.
func (m *MockURLRepositoryInterface) SaveURL(ctx context.Context, urlObj *model.URLObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, urlObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockURLRepositoryInterfaceMockRecorder) SaveURL(ctx, urlObj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockURLRepositoryInterface)(nil).SaveURL), ctx, urlObj)
}
